
: PaintL Compile Language character identifiers :
: This file shows how .plc's are handled by paintL cross-compiling software/packaging software :
: Be warned, it can be VERY confusing :
: The examples can look complicated, but trust me, its like reading html :

1048 or "(x)" -> layer 1 seperator
1049 or "(y)" -> layer 2 seperator
1050 or "(z)" -> layer 3 seperator

2048 or "(f)"  -> function call
2049 or "(p)"  -> parameter sequence
2050 or "(r)"  -> return
2051 or ","    -> parameter
2052 or "(n)"  -> constant-seperator
2053 or "(m)"  -> function memory usage
2054 or "(fn)" -> function name

3048 or "(v)" -> variable declaration
3049 or "(vv)" -> variable value
3050 or "(vml)" -> variable memory location
3051 or "(c)" -> constant declaration
3052 or "(cv)" -> constant value
3053 or "(vn)" -> variable name
3054 or "(cn)" -> constant name


EXAMPLE:

compiled to native by seperating strings by chars down the sort-of-heirarchy sequence:

FUNCTIONS:

"$ funcName(p1=val1, p2=val2, p3=val3) {
    !vr = "no";
}"
-> compile to non-native ->
"(x)fid(fn)8(m)val1,val2,val3(p)none(r)(y)vr(vn)someconst(vv)(v)(n)someconst(cn)no(cv)(c)(f)"
-> seperate function name ->
"(x)fid","8(m)val1,val2,val3(p)none(r)(y)vr(vn)someconst(vv)(v)(n)someconst(cn)no(cv)(c)(f)"
-> get fid and toss it aside for later ->
"8(m)val1,val2,val3(p)none(r)(y)vr(vn)someconst(vv)(v)(n)someconst(cn)no(cv)(c)(f)"
-> seperate function memory ->
"8", "val1,val2,val3(p)none(r)(y)vr(vn)someconst(vv)(v)(n)someconst(cn)no(cv)(c)(f)"
-> get mem and toss it aside for later ->
"val1,val2,val3(p)none(r)(y)vr(vn)someconst(vv)(v)(n)someconst(cn)no(cv)(c)(f)" -> etc.. until gotten all values


write to file as nasm (has to allready contain _start):
"funcName:
   push ebp
   mov  esp, ebp
   sub  esp, 8
   mov  DWORD [esp-4], .someconst ; variables value
   mov  DWORD [esp-8], .someconst.length ; variables length
   mov  ebp, esp
   pop  ebp
   ret ;
.someconst:
   DB "no"
.someconst.length equ $-someconst
"
Then make nasm compile to native for us :)
